/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/knelasevero/extended-job-manager-operator/pkg/apis/extendedjobmanager/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ExtendedJobManagerLister helps list ExtendedJobManagers.
// All objects returned here must be treated as read-only.
type ExtendedJobManagerLister interface {
	// List lists all ExtendedJobManagers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ExtendedJobManager, err error)
	// ExtendedJobManagers returns an object that can list and get ExtendedJobManagers.
	ExtendedJobManagers(namespace string) ExtendedJobManagerNamespaceLister
	ExtendedJobManagerListerExpansion
}

// extendedJobManagerLister implements the ExtendedJobManagerLister interface.
type extendedJobManagerLister struct {
	indexer cache.Indexer
}

// NewExtendedJobManagerLister returns a new ExtendedJobManagerLister.
func NewExtendedJobManagerLister(indexer cache.Indexer) ExtendedJobManagerLister {
	return &extendedJobManagerLister{indexer: indexer}
}

// List lists all ExtendedJobManagers in the indexer.
func (s *extendedJobManagerLister) List(selector labels.Selector) (ret []*v1.ExtendedJobManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExtendedJobManager))
	})
	return ret, err
}

// ExtendedJobManagers returns an object that can list and get ExtendedJobManagers.
func (s *extendedJobManagerLister) ExtendedJobManagers(namespace string) ExtendedJobManagerNamespaceLister {
	return extendedJobManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ExtendedJobManagerNamespaceLister helps list and get ExtendedJobManagers.
// All objects returned here must be treated as read-only.
type ExtendedJobManagerNamespaceLister interface {
	// List lists all ExtendedJobManagers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ExtendedJobManager, err error)
	// Get retrieves the ExtendedJobManager from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ExtendedJobManager, error)
	ExtendedJobManagerNamespaceListerExpansion
}

// extendedJobManagerNamespaceLister implements the ExtendedJobManagerNamespaceLister
// interface.
type extendedJobManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ExtendedJobManagers in the indexer for a given namespace.
func (s extendedJobManagerNamespaceLister) List(selector labels.Selector) (ret []*v1.ExtendedJobManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ExtendedJobManager))
	})
	return ret, err
}

// Get retrieves the ExtendedJobManager from the indexer for a given namespace and name.
func (s extendedJobManagerNamespaceLister) Get(name string) (*v1.ExtendedJobManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("extendedjobmanager"), name)
	}
	return obj.(*v1.ExtendedJobManager), nil
}
